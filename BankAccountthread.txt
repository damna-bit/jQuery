class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public synchronized void deposit(double amount) {
        double newBalance = balance + amount;
        System.out.println("Depositing " + amount + ", new balance is " + newBalance);
        balance = newBalance;
    }

    public synchronized void withdraw(double amount) {
        if (amount <= balance) {
            double newBalance = balance - amount;
            System.out.println("Withdrawing " + amount + ", new balance is " + newBalance);
            balance = newBalance;
        } else {
            System.out.println("Insufficient funds for withdrawal of " + amount + ", current balance is " + balance);
        }
    }

    public double getBalance() {
        return balance;
    }
}

class DepositRunnable implements Runnable {
    private BankAccount account;
    private double amount;

    public DepositRunnable(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        account.deposit(amount);
    }
}

class WithdrawRunnable implements Runnable {
    private BankAccount account;
    private double amount;

    public WithdrawRunnable(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        account.withdraw(amount);
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000.0);

        Thread depositThread1 = new Thread(new DepositRunnable(account, 200.0));
        Thread depositThread2 = new Thread(new DepositRunnable(account, 300.0));
        Thread withdrawThread1 = new Thread(new WithdrawRunnable(account, 150.0));
        Thread withdrawThread2 = new Thread(new WithdrawRunnable(account, 500.0));

        depositThread1.start();
        depositThread2.start();
        withdrawThread1.start();
        withdrawThread2.start();

        try {
            depositThread1.join();
            depositThread2.join();
            withdrawThread1.join();
            withdrawThread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Final balance is " + account.getBalance());
    }
}
